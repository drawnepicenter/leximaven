'use strict';

/* eslint max-len:0, no-unused-vars:0 */
var tools = require('../../tools');

var chalk = require('chalk');
var moment = require('moment');
var http = require('good-guy-http')();
var noon = require('noon');

var CFILE = process.env.HOME + '/.leximaven.noon';

exports.command = 'info';
exports.desc = 'Datamuse metrics';
exports.builder = {};
exports.handler = function (argv) {
  tools.checkConfig(CFILE);
  var config = noon.load(CFILE);
  var url = 'http://api.datamuse.com/metrics';
  http({ url: url }, function (error, response) {
    if (!error && response.statusCode === 200) {
      var body = JSON.parse(response.body);
      var version = body[0];
      var qps = body[1];
      var sugf = body[2];
      var sugn = body[3];
      var wordf = body[4];
      var wordn = body[5];
      console.log(chalk.white('Current queries per second (v' + Math.round(version.value * 100) / 100.0 + '): ' + Math.round(qps.value * 100) / 100.0));
      console.log(chalk.white('Latency (/words): ' + Math.round(wordf.value * 100000) / 100.0 + ' ms (median), ' + Math.round(wordn.value * 100000) / 100.0 + ' ms (99 %ile)'));
      console.log(chalk.white('Latency (/sug): ' + Math.round(sugf.value * 100000) / 100.0 + ' ms (median), ' + Math.round(sugn.value * 100000) / 100.0 + ' ms (99 %ile)'));
    } else {
      console.error(chalk.red.bold('HTTP ' + response.statusCode + ':') + ' ' + chalk.red(error));
    }
  });
  var limit = config.dmuse.date.limit;
  var remain = config.dmuse.date.remain;
  var stamp = new Date(config.dmuse.date.stamp);
  var hours = moment(new Date()).diff(stamp, 'hours');
  var minutes = moment(new Date()).diff(stamp, 'minutes');
  console.log(chalk.white(remain + '/' + limit + ' requests remain today, will reset in ' + (23 - hours) + ' hours, ' + (59 - minutes) + ' minutes.'));
};
//# sourceMappingURL=data:application/json;base64,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RCIsImZpbGUiOiJjbWRzL2RtdXNlX2NtZHMvaW5mby5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludCBtYXgtbGVuOjAsIG5vLXVudXNlZC12YXJzOjAgKi9cbmNvbnN0IHRvb2xzID0gcmVxdWlyZSgnLi4vLi4vdG9vbHMnKVxuXG5jb25zdCBjaGFsayA9IHJlcXVpcmUoJ2NoYWxrJylcbmNvbnN0IG1vbWVudCA9IHJlcXVpcmUoJ21vbWVudCcpXG5jb25zdCBodHRwID0gcmVxdWlyZSgnZ29vZC1ndXktaHR0cCcpKClcbmNvbnN0IG5vb24gPSByZXF1aXJlKCdub29uJylcblxuY29uc3QgQ0ZJTEUgPSBgJHtwcm9jZXNzLmVudi5IT01FfS8ubGV4aW1hdmVuLm5vb25gXG5cbmV4cG9ydHMuY29tbWFuZCA9ICdpbmZvJ1xuZXhwb3J0cy5kZXNjID0gJ0RhdGFtdXNlIG1ldHJpY3MnXG5leHBvcnRzLmJ1aWxkZXIgPSB7fVxuZXhwb3J0cy5oYW5kbGVyID0gKGFyZ3YpID0+IHtcbiAgdG9vbHMuY2hlY2tDb25maWcoQ0ZJTEUpXG4gIGNvbnN0IGNvbmZpZyA9IG5vb24ubG9hZChDRklMRSlcbiAgY29uc3QgdXJsID0gJ2h0dHA6Ly9hcGkuZGF0YW11c2UuY29tL21ldHJpY3MnXG4gIGh0dHAoeyB1cmwgfSwgKGVycm9yLCByZXNwb25zZSkgPT4ge1xuICAgIGlmICghZXJyb3IgJiYgcmVzcG9uc2Uuc3RhdHVzQ29kZSA9PT0gMjAwKSB7XG4gICAgICBjb25zdCBib2R5ID0gSlNPTi5wYXJzZShyZXNwb25zZS5ib2R5KVxuICAgICAgY29uc3QgdmVyc2lvbiA9IGJvZHlbMF1cbiAgICAgIGNvbnN0IHFwcyA9IGJvZHlbMV1cbiAgICAgIGNvbnN0IHN1Z2YgPSBib2R5WzJdXG4gICAgICBjb25zdCBzdWduID0gYm9keVszXVxuICAgICAgY29uc3Qgd29yZGYgPSBib2R5WzRdXG4gICAgICBjb25zdCB3b3JkbiA9IGJvZHlbNV1cbiAgICAgIGNvbnNvbGUubG9nKGNoYWxrLndoaXRlKGBDdXJyZW50IHF1ZXJpZXMgcGVyIHNlY29uZCAodiR7TWF0aC5yb3VuZCh2ZXJzaW9uLnZhbHVlICogMTAwKSAvIDEwMC4wfSk6ICR7TWF0aC5yb3VuZChxcHMudmFsdWUgKiAxMDApIC8gMTAwLjB9YCkpXG4gICAgICBjb25zb2xlLmxvZyhjaGFsay53aGl0ZShgTGF0ZW5jeSAoL3dvcmRzKTogJHtNYXRoLnJvdW5kKHdvcmRmLnZhbHVlICogMTAwMDAwKSAvIDEwMC4wfSBtcyAobWVkaWFuKSwgJHtNYXRoLnJvdW5kKHdvcmRuLnZhbHVlICogMTAwMDAwKSAvIDEwMC4wfSBtcyAoOTkgJWlsZSlgKSlcbiAgICAgIGNvbnNvbGUubG9nKGNoYWxrLndoaXRlKGBMYXRlbmN5ICgvc3VnKTogJHtNYXRoLnJvdW5kKHN1Z2YudmFsdWUgKiAxMDAwMDApIC8gMTAwLjB9IG1zIChtZWRpYW4pLCAke01hdGgucm91bmQoc3Vnbi52YWx1ZSAqIDEwMDAwMCkgLyAxMDAuMH0gbXMgKDk5ICVpbGUpYCkpXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYCR7Y2hhbGsucmVkLmJvbGQoYEhUVFAgJHtyZXNwb25zZS5zdGF0dXNDb2RlfTpgKX0gJHtjaGFsay5yZWQoZXJyb3IpfWApXG4gICAgfVxuICB9KVxuICBjb25zdCBsaW1pdCA9IGNvbmZpZy5kbXVzZS5kYXRlLmxpbWl0XG4gIGNvbnN0IHJlbWFpbiA9IGNvbmZpZy5kbXVzZS5kYXRlLnJlbWFpblxuICBjb25zdCBzdGFtcCA9IG5ldyBEYXRlKGNvbmZpZy5kbXVzZS5kYXRlLnN0YW1wKVxuICBjb25zdCBob3VycyA9IG1vbWVudChuZXcgRGF0ZSkuZGlmZihzdGFtcCwgJ2hvdXJzJylcbiAgY29uc3QgbWludXRlcyA9IG1vbWVudChuZXcgRGF0ZSkuZGlmZihzdGFtcCwgJ21pbnV0ZXMnKVxuICBjb25zb2xlLmxvZyhjaGFsay53aGl0ZShgJHtyZW1haW59LyR7bGltaXR9IHJlcXVlc3RzIHJlbWFpbiB0b2RheSwgd2lsbCByZXNldCBpbiAkezIzIC0gaG91cnN9IGhvdXJzLCAkezU5IC0gbWludXRlc30gbWludXRlcy5gKSlcbn1cbiJdfQ==