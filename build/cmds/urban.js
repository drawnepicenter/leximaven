'use strict';

var themes = require('../themes');
var tools = require('../tools');

var _ = require('lodash');
var chalk = require('chalk');
var http = require('good-guy-http')();
var noon = require('noon');

var CFILE = process.env.HOME + '/.leximaven.noon';

exports.command = 'urban <query>';
exports.desc = 'Urban Dictionary definitions';
exports.builder = {
  out: {
    alias: 'o',
    desc: 'Write cson, json, noon, plist, yaml, xml',
    default: '',
    type: 'string'
  },
  force: {
    alias: 'f',
    desc: 'Force overwriting outfile',
    default: false,
    type: 'boolean'
  },
  save: {
    alias: 's',
    desc: 'Save flags to config file',
    default: false,
    type: 'boolean'
  },
  limit: {
    alias: 'l',
    desc: 'Limit number of results',
    default: 5,
    type: 'number'
  }
};
exports.handler = function (argv) {
  tools.checkConfig(CFILE);
  var config = noon.load(CFILE);
  var userConfig = {
    urban: {
      limit: argv.l
    }
  };
  if (config.merge) config = _.merge({}, config, userConfig);
  var theme = themes.loadTheme(config.theme);
  if (config.verbose) themes.labelDown('Urban Dictionary', theme, null);
  var ucont = [];
  ucont.push(argv.query);
  if (argv._.length > 1) {
    _.each(argv._, function (value) {
      ucont.push(value);
    });
  }
  var words = '';
  if (ucont.length > 1) {
    words = ucont.join('+');
  } else {
    words = ucont[0];
  }
  var url = 'http://api.urbandictionary.com/v0/define?term=' + words;
  url = encodeURI(url);
  var tofile = {
    type: 'urban',
    source: 'http://www.urbandictionary.com',
    url: url
  };
  http({ url: url }, function (error, response) {
    if (!error && response.statusCode === 200) {
      var body = JSON.parse(response.body);
      var limit = config.urban.limit;
      var list = body.list.slice(0, limit);
      for (var i = 0; i <= list.length - 1; i++) {
        var result = list[i];
        themes.labelDown('Definition', theme, result.definition);
        tofile[['definition' + i]] = result.definition;
      }
      if (argv.o) tools.outFile(argv.o, argv.f, tofile);
      if (argv.s && config.merge) noon.save(CFILE, config);
      if (argv.s && !config.merge) console.err(chalk.red('Set option merge to true!'));
    } else {
      console.error(chalk.red.bold('HTTP ' + response.statusCode + ':') + ' ' + chalk.red(error));
    }
  });
};
//# sourceMappingURL=data:application/json;base64,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LEdBQXRDLEVBQTJDO0FBQ3pDLFlBQU0sU0FBUyxLQUFLLENBQUwsQ0FBZjtBQUNBLGVBQU8sU0FBUCxDQUFpQixZQUFqQixFQUErQixLQUEvQixFQUFzQyxPQUFPLFVBQTdDO0FBQ0EsZUFBTyxnQkFBYyxDQUFkLENBQVAsSUFBNkIsT0FBTyxVQUFwQztBQUNEO0FBQ0QsVUFBSSxLQUFLLENBQVQsRUFBWSxNQUFNLE9BQU4sQ0FBYyxLQUFLLENBQW5CLEVBQXNCLEtBQUssQ0FBM0IsRUFBOEIsTUFBOUI7QUFDWixVQUFJLEtBQUssQ0FBTCxJQUFVLE9BQU8sS0FBckIsRUFBNEIsS0FBSyxJQUFMLENBQVUsS0FBVixFQUFpQixNQUFqQjtBQUM1QixVQUFJLEtBQUssQ0FBTCxJQUFVLENBQUMsT0FBTyxLQUF0QixFQUE2QixRQUFRLEdBQVIsQ0FBWSxNQUFNLEdBQU4sQ0FBVSwyQkFBVixDQUFaO0FBQzlCLEtBWkQsTUFZTztBQUNMLGNBQVEsS0FBUixDQUFpQixNQUFNLEdBQU4sQ0FBVSxJQUFWLFdBQXVCLFNBQVMsVUFBaEMsT0FBakIsU0FBbUUsTUFBTSxHQUFOLENBQVUsS0FBVixDQUFuRTtBQUNEO0FBQ0YsR0FoQkQ7QUFpQkQsQ0FoREQiLCJmaWxlIjoiY21kcy91cmJhbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHRoZW1lcyA9IHJlcXVpcmUoJy4uL3RoZW1lcycpXG5jb25zdCB0b29scyA9IHJlcXVpcmUoJy4uL3Rvb2xzJylcblxuY29uc3QgXyA9IHJlcXVpcmUoJ2xvZGFzaCcpXG5jb25zdCBjaGFsayA9IHJlcXVpcmUoJ2NoYWxrJylcbmNvbnN0IGh0dHAgPSByZXF1aXJlKCdnb29kLWd1eS1odHRwJykoKVxuY29uc3Qgbm9vbiA9IHJlcXVpcmUoJ25vb24nKVxuXG5jb25zdCBDRklMRSA9IGAke3Byb2Nlc3MuZW52LkhPTUV9Ly5sZXhpbWF2ZW4ubm9vbmBcblxuZXhwb3J0cy5jb21tYW5kID0gJ3VyYmFuIDxxdWVyeT4nXG5leHBvcnRzLmRlc2MgPSAnVXJiYW4gRGljdGlvbmFyeSBkZWZpbml0aW9ucydcbmV4cG9ydHMuYnVpbGRlciA9IHtcbiAgb3V0OiB7XG4gICAgYWxpYXM6ICdvJyxcbiAgICBkZXNjOiAnV3JpdGUgY3NvbiwganNvbiwgbm9vbiwgcGxpc3QsIHlhbWwsIHhtbCcsXG4gICAgZGVmYXVsdDogJycsXG4gICAgdHlwZTogJ3N0cmluZycsXG4gIH0sXG4gIGZvcmNlOiB7XG4gICAgYWxpYXM6ICdmJyxcbiAgICBkZXNjOiAnRm9yY2Ugb3ZlcndyaXRpbmcgb3V0ZmlsZScsXG4gICAgZGVmYXVsdDogZmFsc2UsXG4gICAgdHlwZTogJ2Jvb2xlYW4nLFxuICB9LFxuICBzYXZlOiB7XG4gICAgYWxpYXM6ICdzJyxcbiAgICBkZXNjOiAnU2F2ZSBmbGFncyB0byBjb25maWcgZmlsZScsXG4gICAgZGVmYXVsdDogZmFsc2UsXG4gICAgdHlwZTogJ2Jvb2xlYW4nLFxuICB9LFxuICBsaW1pdDoge1xuICAgIGFsaWFzOiAnbCcsXG4gICAgZGVzYzogJ0xpbWl0IG51bWJlciBvZiByZXN1bHRzJyxcbiAgICBkZWZhdWx0OiA1LFxuICAgIHR5cGU6ICdudW1iZXInLFxuICB9LFxufVxuZXhwb3J0cy5oYW5kbGVyID0gKGFyZ3YpID0+IHtcbiAgdG9vbHMuY2hlY2tDb25maWcoQ0ZJTEUpXG4gIGxldCBjb25maWcgPSBub29uLmxvYWQoQ0ZJTEUpXG4gIGNvbnN0IHVzZXJDb25maWcgPSB7XG4gICAgdXJiYW46IHtcbiAgICAgIGxpbWl0OiBhcmd2LmwsXG4gICAgfSxcbiAgfVxuICBpZiAoY29uZmlnLm1lcmdlKSBjb25maWcgPSBfLm1lcmdlKHt9LCBjb25maWcsIHVzZXJDb25maWcpXG4gIGNvbnN0IHRoZW1lID0gdGhlbWVzLmxvYWRUaGVtZShjb25maWcudGhlbWUpXG4gIGlmIChjb25maWcudmVyYm9zZSkgdGhlbWVzLmxhYmVsRG93bignVXJiYW4gRGljdGlvbmFyeScsIHRoZW1lLCBudWxsKVxuICBjb25zdCB1Y29udCA9IFtdXG4gIHVjb250LnB1c2goYXJndi5xdWVyeSlcbiAgaWYgKGFyZ3YuXy5sZW5ndGggPiAxKSB7XG4gICAgXy5lYWNoKGFyZ3YuXywgKHZhbHVlKSA9PiB7XG4gICAgICB1Y29udC5wdXNoKHZhbHVlKVxuICAgIH0pXG4gIH1cbiAgbGV0IHdvcmRzID0gJydcbiAgaWYgKHVjb250Lmxlbmd0aCA+IDEpIHtcbiAgICB3b3JkcyA9IHVjb250LmpvaW4oJysnKVxuICB9IGVsc2Uge1xuICAgIHdvcmRzID0gdWNvbnRbMF1cbiAgfVxuICBsZXQgdXJsID0gYGh0dHA6Ly9hcGkudXJiYW5kaWN0aW9uYXJ5LmNvbS92MC9kZWZpbmU/dGVybT0ke3dvcmRzfWBcbiAgdXJsID0gZW5jb2RlVVJJKHVybClcbiAgY29uc3QgdG9maWxlID0ge1xuICAgIHR5cGU6ICd1cmJhbicsXG4gICAgc291cmNlOiAnaHR0cDovL3d3dy51cmJhbmRpY3Rpb25hcnkuY29tJyxcbiAgICB1cmwsXG4gIH1cbiAgaHR0cCh7IHVybCB9LCAoZXJyb3IsIHJlc3BvbnNlKSA9PiB7XG4gICAgaWYgKCFlcnJvciAmJiByZXNwb25zZS5zdGF0dXNDb2RlID09PSAyMDApIHtcbiAgICAgIGNvbnN0IGJvZHkgPSBKU09OLnBhcnNlKHJlc3BvbnNlLmJvZHkpXG4gICAgICBjb25zdCBsaW1pdCA9IGNvbmZpZy51cmJhbi5saW1pdFxuICAgICAgY29uc3QgbGlzdCA9IGJvZHkubGlzdC5zbGljZSgwLCBsaW1pdClcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDw9IGxpc3QubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGxpc3RbaV1cbiAgICAgICAgdGhlbWVzLmxhYmVsRG93bignRGVmaW5pdGlvbicsIHRoZW1lLCByZXN1bHQuZGVmaW5pdGlvbilcbiAgICAgICAgdG9maWxlW1tgZGVmaW5pdGlvbiR7aX1gXV0gPSByZXN1bHQuZGVmaW5pdGlvblxuICAgICAgfVxuICAgICAgaWYgKGFyZ3YubykgdG9vbHMub3V0RmlsZShhcmd2Lm8sIGFyZ3YuZiwgdG9maWxlKVxuICAgICAgaWYgKGFyZ3YucyAmJiBjb25maWcubWVyZ2UpIG5vb24uc2F2ZShDRklMRSwgY29uZmlnKVxuICAgICAgaWYgKGFyZ3YucyAmJiAhY29uZmlnLm1lcmdlKSBjb25zb2xlLmVycihjaGFsay5yZWQoJ1NldCBvcHRpb24gbWVyZ2UgdG8gdHJ1ZSEnKSlcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5lcnJvcihgJHtjaGFsay5yZWQuYm9sZChgSFRUUCAke3Jlc3BvbnNlLnN0YXR1c0NvZGV9OmApfSAke2NoYWxrLnJlZChlcnJvcil9YClcbiAgICB9XG4gIH0pXG59XG4iXX0=